#!/usr/bin/env python

import os
import sys

sys.path.append(os.path.join(
    os.path.dirname(os.path.abspath(__file__)),
    "..",
    "src",
    "python"
))

import pygtk

pygtk.require("2.0")

import gtk
import cairocffi
import cairocffi as cairo
import cairoucffi as cairou
import math

# cairocffi.install_as_pycairo()


class CairoDrawingArea(gtk.DrawingArea):
    def __init__(self, width, height, original=False):
        gtk.DrawingArea.__init__(self)

        self.azimuth = 180.0
        self.elevation = 45.0
        self.height = 100.0
        self.ambient = 0.0
        self.diffuse = 0.1

        self._original = original

        self.set_size_request(width, height)

        self.connect("expose-event", self._render)

    def value_changed(self, widget, name):
        setattr(self, name, widget.get_value())

        self.queue_draw()

    def _render(self, widget, event):
        cr = cairo.cr_cast(self.window.cairo_create())
        w, h = self.allocation.width, self.allocation.height

        if not self._original:
            s = cairo.ImageSurface(cairo.FORMAT_A8, w, h)
            c = cairo.Context(s)

            self._draw_cairo(c, w, h)

            cairou.emboss(
                s,
                float(self.azimuth) * (math.pi / 180.0),
                float(self.elevation) * (math.pi / 180.0),
                float(self.height),
                float(self.ambient),
                float(self.diffuse)
            )

            cr.set_source_surface(s, 0, 0)
            cr.paint()

        else:
            self._draw_cairo(cr, w, h)

        return True

    def _draw_cairo_shape(self, cr, w, h):
        # c.set_source_rgba(1.0, 1.0, 1.0, 1.0)
        # c.arc(w / 2.0, h / 2.0, w / 4.0, 0.0, 2.0 * math.pi)
        # c.fill()

        cr.set_source_rgba(1.0, 1.0, 1.0, 0.1)

        strokes = 40

        for i in range(strokes, 0, -4):
            cr.set_line_width(i)
            cr.arc(w / 2.0, h / 2.0, w / 3.0, 0.0, 2.0 * math.pi)
            cr.stroke()

    def _draw_cairo(self, cr, w, h):
        """
        text = "Cairo"

        cr.set_font_size(100)
        cr.select_font_face(
            "Droid Sans",
            cairo.FONT_SLANT_NORMAL,
            cairo.FONT_WEIGHT_BOLD
        )

        extents = cr.text_extents(text)

        cr.move_to(
            ((w - extents[2]) / 2.0) - extents[0],
            (h - extents[1]) / 2.0
        )

        cr.show_text(text)
        """

        cr.set_line_width(35.0)
        cr.arc(w / 2.0, h / 2.0, w / 4.0, 0.0, 2.0 * math.pi)
        cr.stroke()


class CairoWindow(gtk.Window):
    def __init__(self, w, h):
        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)

        vbox = gtk.VBox()
        draw1 = CairoDrawingArea(w, h, True)
        draw2 = CairoDrawingArea(w, h)
        table = gtk.Table(5, 2, True)

        scale_data = (
            ("azimuth", 0.0, 180.0, 1.0),
            ("elevation", 0.0, 180.0, 1.0),
            ("height", 0.0, 200.0, 5.0),
            ("ambient", 0.0, 1.0, 0.1),
            ("diffuse", 0.1, 1.0, 0.1)
        )

        scales = []

        for name, minv, maxv, inc in scale_data:
            label = gtk.Label(name.upper())
            scale = gtk.HScale()

            label.set_alignment(0.0, 0.5)

            scale.set_range(minv, maxv)
            scale.set_increments(inc, inc)
            scale.set_value(getattr(draw1, name))
            scale.set_value_pos(gtk.POS_RIGHT)
            scale.connect("value-changed", draw2.value_changed, name.lower())

            scales.append((label, scale))

        table.attach(scales[0][0], 0, 1, 0, 1)
        table.attach(scales[0][1], 1, 2, 0, 1)
        table.attach(scales[1][0], 0, 1, 1, 2)
        table.attach(scales[1][1], 1, 2, 1, 2)
        table.attach(scales[2][0], 0, 1, 2, 3)
        table.attach(scales[2][1], 1, 2, 2, 3)
        table.attach(scales[3][0], 0, 1, 3, 4)
        table.attach(scales[3][1], 1, 2, 3, 4)
        table.attach(scales[4][0], 0, 1, 4, 5)
        table.attach(scales[4][1], 1, 2, 4, 5)

        frame1 = gtk.Frame()
        frame2 = gtk.Frame()

        frame1.add(draw1)
        frame1.set_border_width(5)

        frame2.add(draw2)
        frame2.set_border_width(5)

        hbox = gtk.HBox()

        hbox.pack_start(frame1)
        hbox.pack_start(frame2)

        vbox.pack_start(hbox)
        vbox.pack_start(table, False, False)

        self.set_border_width(5)
        self.add(vbox)


if __name__ == "__main__":
    cw = CairoWindow(256, 256)

    cw.connect("destroy", gtk.main_quit)
    cw.show_all()

    gtk.main()
