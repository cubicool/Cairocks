#!/usr/bin/env python3

import sys

sys.path.extend(("../src/python", "../tests"))

import gi

for req in ("Gtk", "Gdk", "GtkSource"):
    gi.require_version(req, "3.0")

from gi.repository import Gtk, Gdk, Pango, GtkSource

import cairocffi as cairo
import cairoucffi as cairou
import os

cairou.merge_with_cairocffi()

DEFAULT_BUFFER = """\
# This is a Python script to quickly test Cairo stuff!
# You have access to the following variables:
# cr = The Cairo drawing context.
# width = The DrawingArea's allocated width.
# height = The DrwaingArea's allocated height.

import math

cr.set_source_rgba(0.1, 0.2, 0.3, 1.0)
cr.paint()
cr.set_line_width(10)
cr.arc(width / 2.0, height / 2.0, height / 3.0, 0.0, 2.0 * math.pi)
cr.set_source_rgb(0.3, 0.3, 0.3)
cr.fill_preserve()
cr.set_source_rgb(0.1, 0.1, 0.1)
cr.stroke()
"""


class CairoDrawingArea(Gtk.DrawingArea):
    def __init__(self, width=0, height=0, win=None, buf=DEFAULT_BUFFER):
        Gtk.DrawingArea.__init__(self)

        self._buffer = buf
        self._win = win
        self._cp = []

        self.set_events(
            Gdk.EventMask.BUTTON_PRESS_MASK |
            Gdk.EventMask.BUTTON_RELEASE_MASK |
            Gdk.EventMask.POINTER_MOTION_MASK |
            Gdk.EventMask.ENTER_NOTIFY_MASK |
            Gdk.EventMask.LEAVE_NOTIFY_MASK
        )

        self.set_size_request(width, height)
        self.connect("draw", self._render)

    def _render(self, widget, cr):
        w = widget.get_allocated_width()
        h = widget.get_allocated_height()

        if self._win:
            self._win.set_status(w, h)

        self._eval(self._buffer, cairou.cr_cast(cr), w, h)

        return True

    def _eval(self, buf, cr, w, h):
        eval(compile(buf, "<cairoscript>", "exec"), {
            "cairo": cairo,
            "cr": cr,
            "width":  w,
            "height":  h
        })

    def _size(self, w, h):
        if not w:
            w = self.get_allocated_width()

        if not h:
            h = self.get_allocated_height()

        return int(w), int(h)

    # TODO: Only set _buffer IF the source is valid; otherwise, set some kind
    #       of indicator, but do NOT refresh the screen.
    def parse(self, buf):
        self._buffer = buf

        self.queue_draw()

    def write_to_png(self, path, w=None, h=None):
        w, h = self._size(w, h)

        surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, w, h)
        context = cairo.Context(surface)

        self._eval(self._buffer, context, w, h)

        surface.write_to_png(path)

    def write_to_svg(self, path, w=None, h=None):
        w, h = self._size(w, h)

        surface = cairo.SVGSurface(path, w, h)
        context = cairo.Context(surface)

        self._eval(self._buffer, context, w, h)

        surface.flush()
        surface.finish()


class SourceView(GtkSource.View):
    def __init__(self, text="", on_change=lambda *a: None):
        GtkSource.View.__init__(self)

        buf = GtkSource.Buffer()

        style_manager = GtkSource.StyleSchemeManager.get_default()
        lang_manager = GtkSource.LanguageManager.get_default()

        style_manager.prepend_search_path(os.path.join(
            os.path.dirname(os.path.abspath(sys.argv[0])),
            "styles"
        ))

        buf.set_text(text)
        buf.set_style_scheme(style_manager.get_scheme("cubicool"))
        buf.set_highlight_syntax(True)
        buf.set_language(lang_manager.get_language("python3"))
        buf.connect("changed", on_change)

        self.set_buffer(buf)
        self.connect("realize", self._realize)
        self.set_tab_width(4)
        self.set_auto_indent(True)
        self.set_show_line_numbers(True)
        self.connect("realize", self._realize)

    def _realize(self, *args):
        self.set_font_size(10)

    def set_text(self, text):
        self.get_buffer().set_text(text)

    def set_font_size(self, size):
        font = Pango.FontDescription("Sauce Code Powerline Regular")

        font.set_size(Pango.SCALE * size)

        self.modify_font(font)

    def get_text(self):
        buf = self.get_buffer()

        return buf.get_text(buf.get_start_iter(), buf.get_end_iter(), False)


class CairoWindow(Gtk.Window):
    def __init__(self, w, h, script=None, autosave=None):
        Gtk.Window.__init__(self)

        b = script and open(script).read() or DEFAULT_BUFFER

        self._draw = CairoDrawingArea(w, h, self, b)
        self._text = SourceView(b, self._parse)
        self._status = Gtk.Statusbar()

        tool = Gtk.HBox()
        vbox = Gtk.VBox()
        scroll = Gtk.ScrolledWindow()
        paned = Gtk.HPaned()
        frame = Gtk.Frame()

        scroll.add(self._text)

        frame.add(scroll)
        frame.set_border_width(2)

        paned.pack1(self._draw, False, False)
        paned.pack2(frame, True, True)

        vbox.pack_start(paned, True, True, 0)
        vbox.pack_start(tool, False, False, 2)
        vbox.pack_start(self._status, False, False, 0)

        for st, tt, cb in zip((
            Gtk.STOCK_OPEN,
            Gtk.STOCK_SAVE,
            Gtk.STOCK_YES,
            Gtk.STOCK_QUIT
        ), (
            "Open an existing script",
            "Save this script",
            "Write script to PNG/SVG images",
            "Quit the application"
        ), (
            self._open_script,
            self._save_script,
            self._save_image,
            lambda *a, **k: Gtk.main_quit()
        )):
            button = Gtk.Button()
            image = Gtk.Image()

            image.set_from_stock(st, Gtk.IconSize.MENU)

            button.set_relief(Gtk.ReliefStyle.NONE)
            button.set_focus_on_click(False)
            button.set_image(image)
            button.set_tooltip_text(tt)
            button.connect("clicked", cb)

            tool.pack_start(button, False, False, 0)

        font_size_label = Gtk.Label("Font Size:")
        font_size = Gtk.ComboBoxText()

        font_size_label.set_alignment(1.0, 0.5)

        [font_size.append_text("%i" % i) for i in range(10, 20)]

        font_size.connect("changed", self._set_font)
        font_size.set_active(0)

        tool.pack_start(font_size_label, True, True, 5)
        tool.pack_start(font_size, False, False, 5)

        self.set_title("cairodraw")
        self.add(vbox)
        self.set_focus(self._text)

        if autosave:
            self._draw.queue_draw()
            self._save_image(None, w, h)

    def _open_script(self, *args):
        fc = Gtk.FileChooserDialog(
            "Selet a script file...",
            self,
            Gtk.FileChooserAction.OPEN,
            (
                Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                Gtk.STOCK_OPEN, Gtk.ResponseType.OK
            )
        )

        fl1 = Gtk.FileFilter()

        fl1.set_name("Pycairo Scripts")
        fl1.add_pattern("*.py")

        fl2 = Gtk.FileFilter()

        fl2.set_name("All Files")
        fl2.add_pattern("*")

        fc.add_filter(fl1)
        fc.add_filter(fl2)

        if fc.run() == Gtk.ResponseType.OK:
            self._text.set_text(open(fc.get_filename()).read())

            self._parse()

        fc.destroy()

    def _save_script(self, *args):
        fc = Gtk.FileChooserDialog(
            "Save Python Script as...",
            self,
            Gtk.FileChooserAction.SAVE,
            (
                Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                Gtk.STOCK_SAVE, Gtk.ResponseType.OK
            )
        )

        if fc.run() == Gtk.ResponseType.OK:
            fn = fc.get_filename()

            if not fn.endswidth(".py"):
                fn += ".py"

            with open(fn, "w") as f:
                f.write(self._text.get_text())

        fc.destroy()

    def _save_image(self, widget, w=None, h=None):
        fc = Gtk.FileChooserDialog(
            "Save PNG & SVG Images as...",
            self,
            Gtk.FileChooserAction.SAVE,
            (
                Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                Gtk.STOCK_SAVE, Gtk.ResponseType.OK
            )
        )

        if fc.run() == Gtk.ResponseType.OK:
            self._draw.write_to_png(fc.get_filename() + ".png", w, h)
            self._draw.write_to_svg(fc.get_filename() + ".svg", w, h)

        fc.destroy()

    def _parse(self, *args):
        self._draw.parse(self._text.get_text())

    def _set_font(self, cb):
        self._text.set_font_size(int(cb.get_active_text()))

    def set_status(self, w, h):
        self._status.push(0, "Dimensions: %i x %i" % (w, h))


if __name__ == "__main__":
    f = None
    w = 512
    h = 256
    s = False

    if len(sys.argv) >= 2 and os.path.exists(sys.argv[1]):
        f = sys.argv[1]

    if len(sys.argv) >= 4:
        try:
            w = int(sys.argv[2])
            h = int(sys.argv[3])
            s = True

        except:
            pass

    cw = CairoWindow(w, h, f, s)

    if not s:
        cw.connect("destroy", Gtk.main_quit)
        cw.show_all()
        # cw.set_size_request(1000, 550)
        cw.maximize()

        Gtk.main()
